---
import { Image } from "astro:assets";
import type { Work } from "@/constants/images";
import "./work-gallery.css";

interface Props {
  work: Work;
}

const { work } = Astro.props;

const images: any = import.meta.glob(
  "../../assets/images/**/**/*.{jpg,png,webp}",
  {
    eager: true,
  }
);

const resolvedImages = work.images.map((img) => {
  const regularSrc = images[`../../${img.source.regular}`]?.default;
  const thumbnailSrc = images[`../../${img.source.thumbnail}`]?.default;

  if (!regularSrc || !thumbnailSrc) {
    console.error(
      `Image not found for ${img.source.regular}. Does not exist in glob: "src/assets/images/**/**/*.{jpg,png,webp}"`
    );
  }

  return {
    ...img,
    source: {
      regular: regularSrc,
      thumbnail: thumbnailSrc,
    },
  };
});
---

<div class="work-gallery">
  <h1>{work.title}</h1>
  <div class="work-gallery_container">
    {
      resolvedImages?.map(({ alt, source, width, height }, index: number) => {
        if (index < 12) {
          return (
            <div class="work-gallery_img-wrapper">
              <a href={`/works/${work.id}/${index}`}>
                <Image
                  src={source.thumbnail}
                  alt={alt}
                  width={width}
                  height={height}
                  class="work_img"
                  loading="lazy"
                />
              </a>
            </div>
          );
        }
        return null;
      })
    }
  </div>
</div>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Image is above the fold, add eager loading attribute
          (entry.target as HTMLImageElement).loading = "eager";
          observer.unobserve(entry.target);
        }
      });
    },
    {
      rootMargin: "0px",
      threshold: 0.5,
    }
  );

  const images = document.querySelectorAll("img");
  images.forEach((image) => {
    observer.observe(image);
  });
</script>
