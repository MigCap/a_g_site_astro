---
import { Image } from "astro:assets";
import { works } from "@/constants/images";
import type { IWork, WORKS_IDS } from "@/constants/images";
import type { ImageMetadata } from "astro";

interface Props {
  work: IWork;
  workId: number;
}

export async function getStaticPaths() {
  const categoryPaths = Object.keys(works).flatMap((collectionKey) => {
    const workKey = collectionKey as WORKS_IDS;
    const idPaths = works[workKey].images.map((_, index: number) => {
      return {
        params: { slug: `${collectionKey}/${index}` },
        props: {
          work: (works as any)[collectionKey],
          workId: index,
        },
      };
    });
    return idPaths;
  });

  return [...categoryPaths];
}

const { work, workId } = Astro.props;
const { title } = work;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "../../assets/images/**/**/*.{jpg,png,webp}",
  {
    eager: true,
  }
);

const resolvedImages = work.images.map((img) => {
  const regularSrc = images[`../../${img.source.regular}`]?.default;
  const thumbnailSrc = images[`../../${img.source.thumbnail}`]?.default;

  if (!regularSrc || !thumbnailSrc) {
    console.error(
      `Image not found for ${img.source.regular}. Does not exist in glob: "src/assets/images/**/**/*.{jpg,png,webp}"`
    );
  }

  return {
    ...img,
    source: {
      regular: regularSrc,
      thumbnail: thumbnailSrc,
    },
  };
});

const currentImage = resolvedImages[workId];
---

<div>
  <!-- <img
    src={currentImage.source.regular.src}
    alt={currentImage.alt}
    width="100%"
    height="100%"
    loading="lazy"
    class="work_img"
  /> -->
  <Image
    src={currentImage.source.regular}
    alt={currentImage.alt}
    class="work_img"
  />
  <h1>{title} - {currentImage.caption}</h1>
</div>

<style>
  .work_img {
    width: 100%;
    max-width: 100%;
    height: auto;
    /* display: block; */
  }
</style>
