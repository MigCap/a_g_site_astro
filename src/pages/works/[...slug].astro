---
import { Image } from "astro:assets";
import { works } from "@/constants/images";
import ChevronRight from "@/components/icons/ChevronRight.astro";
import ChevronLeft from "@/components/icons/ChevronLeft.astro";
import Square from "@/components/icons/Square.astro";
import type { Work, WORKS_IDS } from "@/constants/images";
import type { ImageMetadata } from "astro";
import Layout from "@/layouts/Layout.astro";

interface Props {
  work: Work;
  workId: number;
}

export async function getStaticPaths() {
  const categoryPaths = Object.keys(works).flatMap((collectionKey) => {
    const workKey = collectionKey as WORKS_IDS;
    const idPaths = works[workKey].images.map((_, index: number) => {
      return {
        params: { slug: `${collectionKey}/${index}` },
        props: {
          work: (works as any)[collectionKey],
          workId: index,
        },
      };
    });
    return idPaths;
  });

  return [...categoryPaths];
}

const { work, workId } = Astro.props;
const { title } = work;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "../../assets/images/**/**/*.{jpg,png,webp}",
  {
    eager: true,
  }
);

const resolvedImages = work.images.map((img) => {
  const regularSrc = images[`../../${img.source.regular}`]?.default;
  const thumbnailSrc = images[`../../${img.source.thumbnail}`]?.default;

  if (!regularSrc || !thumbnailSrc) {
    console.error(
      `Image not found for ${img.source.regular}. Does not exist in glob: "src/assets/images/**/**/*.{jpg,png,webp}"`
    );
  }

  return {
    ...img,
    source: {
      regular: regularSrc,
      thumbnail: thumbnailSrc,
    },
  };
});

const currentImage = resolvedImages[workId];
const currentImageCaption = currentImage.caption;
const hasCaptionSeparator = currentImageCaption.indexOf("-") > 0;
const startString = currentImageCaption?.substring(
  0,
  currentImageCaption.indexOf("-")
);
const endString = currentImageCaption?.substring(
  currentImageCaption.indexOf("-"),
  currentImageCaption.length
);
const prevImageIndex = workId === 0 ? resolvedImages.length - 1 : workId - 1;
const nextImageIndex = workId === resolvedImages.length - 1 ? 0 : workId + 1;
---

<Layout isWorkPage={true}>
  <div class="work_container">
    <div
      class="work_img_wrapper"
      id="swipe-container"
      data-work-id={work.id}
      data-prev-index={prevImageIndex}
      data-next-index={nextImageIndex}
    >
      <Image
        src={currentImage.source.regular}
        alt={currentImage.alt}
        class="work_img"
      />
    </div>
    <div class="work_navigation">
      <a href={`/works/${work.id}/${prevImageIndex}`}>
        <ChevronLeft />
      </a>
      <a href={`/works/${work.id}/${nextImageIndex}`}>
        <ChevronRight />
      </a>
    </div>
    <h3 class="img_title">{title}</h3>
    <div class="img_caption">
      <p>
        {
          hasCaptionSeparator ? (
            <>
              <strong>{startString}</strong>
              {endString}
            </>
          ) : (
            <span>{currentImageCaption}</span>
          )
        }
      </p>
    </div>
    <a href={`/works`}>
      <Square />
    </a>
  </div>
</Layout>

<script type="module">
  let startX = 0;
  let endX = 0;
  let swipeThreshold = 50; // Minimum distance (in px) for swipe detection
  let isSwiping = false;

  const swipeContainer = document.getElementById("swipe-container");

  if (swipeContainer) {
    swipeContainer.addEventListener("touchstart", handleTouchStart, false);
    swipeContainer.addEventListener("touchmove", handleTouchMove, false);
    swipeContainer.addEventListener("touchend", handleTouchEnd, false);
  }

  // Get the data attributes from the swipe container element
  const workId = swipeContainer?.getAttribute("data-work-id");
  const prevIndex = parseInt(
    swipeContainer?.getAttribute("data-prev-index") ?? "0"
  );
  const nextIndex = parseInt(
    swipeContainer?.getAttribute("data-next-index") ?? "0"
  );

  function handleTouchStart(e) {
    const touch = e.touches[0];
    startX = touch.clientX;
    endX = startX; // Initialize endX with startX to prevent false triggers
    isSwiping = true; // Indicate that a swipe has started
  }

  function handleTouchMove(e) {
    if (!isSwiping) return; // Prevent unnecessary move events
    const touch = e.touches[0];
    endX = touch.clientX;
  }

  function handleTouchEnd() {
    if (!isSwiping) return; // Prevent unnecessary end events
    const swipeDistance = startX - endX;

    if (Math.abs(swipeDistance) > swipeThreshold) {
      if (swipeDistance > 0) {
        // Swipe left (next image)
        if (workId) {
          window.location.href = `/works/${workId}/${nextIndex}`;
        }
      } else {
        // Swipe right (previous image)
        if (workId) {
          window.location.href = `/works/${workId}/${prevIndex}`;
        }
      }
    }

    isSwiping = false; // Reset swipe state
  }
</script>

<style>
  .work_container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem 5rem;
  }

  .work_navigation {
    display: flex;
    justify-content: center;
    gap: 3rem;
    padding: 1rem 0;
  }

  .work_img_wrapper {
    height: 65vh;
    width: 100%;
    display: flex;
    justify-content: center;
    overflow: hidden;
  }

  .work_img {
    width: 100%;
    height: auto;
    object-fit: contain;
  }

  .img_title {
    font-size: 0.7rem;
    font-weight: 900;
    margin: 1rem 0 0 0;
  }

  .img_caption {
    font-size: 0.7rem;
    margin: 1rem 0;
  }

  @media (max-width: 30em) {
    .work_container {
      padding: 0 1rem;
    }
    .work_img_wrapper {
      height: 45vh;
    }
  }
</style>
